version: "3.9"

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-filesvc} -d ${POSTGRES_DB:-filesvc}",
        ]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - miniodata:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 10

  mc-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb -p local/${MINIO_BUCKET} || true
      "
    restart: "no"

  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_healthy
      mc-init:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
    # Для разработки: монтируем код внутрь контейнера
    volumes:
      - ./:/app
    command: >
      sh -c "
      alembic -c /app/alembic.ini upgrade head &&
      uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  worker:
    build:
      context: .
      dockerfile: docker/worker.Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./:/app
    command: >
      sh -c "poetry run celery -A app.tasks.celery_app.celery worker -l info --concurrency=2"

  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER_URL=${REDIS_BROKER}
      - CELERY_RESULT_BACKEND=${REDIS_BACKEND}
    depends_on:
      redis:
        condition: service_started
    ports:
      - "5555:5555"

volumes:
  dbdata:
  miniodata:
